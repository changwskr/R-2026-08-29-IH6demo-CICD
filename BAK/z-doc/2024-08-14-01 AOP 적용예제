스프링 부트에서 트랜잭션(transaction) 전후에 필터를 적용하려면 AOP(Aspect-Oriented Programming)를 사용할 수 있습니다.
AOP를 사용하면 메소드 실행 전후에 특정 로직을 삽입할 수 있습니다.
이를 통해 거래(트랜잭션)가 발생하기 전후에 필터를 적용하는 기능을 구현할 수 있습니다.

아래는 스프링 부트에서 트랜잭션 전후에 필터를 적용하는 간단한 예제입니다.

### 1. Maven/Gradle 의존성 추가
먼저 프로젝트에 AOP 의존성을 추가해야 합니다. `pom.xml`에 다음과 같이 추가하세요.
```xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>
```

또는 `build.gradle`을 사용하는 경우:

```groovy
implementation 'org.springframework.boot:spring-boot-starter-aop'
```

### 2. 트랜잭션 전후에 필터를 적용하는 AOP 클래스 작성

다음으로, 트랜잭션이 발생하는 서비스 메소드 전후에 필터를 적용할 AOP 클래스를 작성합니다.

```java
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class TransactionFilterAspect {

    // 거래가 발생하기 전 실행할 로직
    @Before("execution(* com.example.service.*.*(..))")
    public void beforeTransaction() {
        System.out.println("거래가 발생하기 전 필터 로직 실행");
        // 여기에 원하는 로직을 추가
    }

    // 거래가 성공적으로 완료된 후 실행할 로직
    @AfterReturning("execution(* com.example.service.*.*(..))")
    public void afterTransactionSuccess() {
        System.out.println("거래가 성공적으로 완료된 후 필터 로직 실행");
        // 여기에 원하는 로직을 추가
    }

    // 거래가 종료된 후(성공, 실패와 관계없이) 실행할 로직
    @After("execution(* com.example.service.*.*(..))")
    public void afterTransaction() {
        System.out.println("거래 종료 후 필터 로직 실행");
        // 여기에 원하는 로직을 추가
    }
}
```

위의 `TransactionFilterAspect` 클래스는 다음과 같은 포인트컷(Pointcut)을 정의합니다:

- `@Before`: 특정 메소드가 실행되기 전에 실행되는 로직.
- `@AfterReturning`: 특정 메소드가 성공적으로 실행된 후에 실행되는 로직.
- `@After`: 특정 메소드가 실행된 후 (성공 또는 예외 발생과 관계없이) 실행되는 로직.

여기서 `execution(* com.example.service.*.*(..))`는 `com.example.service` 패키지 아래의 모든 클래스의 모든 메소드를 타겟으로 하는 포인트컷 표현식입니다. 이 부분은 실제 적용하고자 하는 메소드 패턴에 맞게 조정할 수 있습니다.

### 3. 트랜잭션이 발생하는 서비스 클래스 작성

다음으로, 트랜잭션이 발생하는 서비스 클래스를 작성합니다.

```java
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class TransactionalService {

    @Transactional
    public void performTransaction() {
        System.out.println("트랜잭션이 실행 중입니다.");
        // 트랜잭션 내에서 실행할 비즈니스 로직 작성
    }
}
```

### 4. 스프링 부트 애플리케이션 실행

마지막으로, 스프링 부트 애플리케이션을 실행하면, 트랜잭션이 발생할 때마다 AOP 필터가 작동하는 것을 확인할 수 있습니다.

```java
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    CommandLineRunner run(TransactionalService transactionalService) {
        return args -> {
            transactionalService.performTransaction();
        };
    }
}
```

이 코드를 실행하면, 트랜잭션 메소드가 호출되기 전후에 필터 로직이 실행되는 것을 콘솔에서 확인할 수 있습니다. AOP를 통해 거래가 발생하기 전후에 원하는 작업을 간단하게 추가할 수 있습니다.