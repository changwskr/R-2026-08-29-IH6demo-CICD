Docker를 사용하여 Tomcat 서버에 WAR 파일을 배포하는 방법을 단계별로 설명드리겠습니다. 이 과정은 Docker 이미지 생성, 컨테이너 실행 및 WAR 파일 배포의 세 가지 주요 단계로 나뉩니다.

### 1. Dockerfile 작성
먼저 Dockerfile을 작성하여 Tomcat 이미지를 기반으로 사용자 지정 이미지를 만듭니다. 이 Dockerfile에는 WAR 파일을 Tomcat의 `webapps` 디렉토리에 복사하는 작업이 포함됩니다.

1. 프로젝트 디렉토리를 생성하고 WAR 파일을 해당 디렉토리로 이동합니다.
2. 아래와 같은 내용으로 `Dockerfile`을 작성합니다:

```dockerfile
====================================================================
# Tomcat 베이스 이미지 사용
FROM tomcat:9.0

# WAR 파일을 Tomcat의 webapps 디렉토리에 복사
COPY your-app.war /usr/local/tomcat/webapps/

# Tomcat의 기본 포트
EXPOSE 8080
====================================================================

### 2. Docker 이미지 빌드

위의 `Dockerfile`을 사용하여 Docker 이미지를 빌드합니다.

1. 터미널을 열고 Dockerfile이 있는 디렉토리로 이동합니다.
2. 아래 명령어를 실행하여 이미지를 빌드합니다:

```bash
docker build -t my-tomcat-app .
```

여기서 `my-tomcat-app`은 생성될 이미지의 이름입니다.

### 3. Docker 컨테이너 실행

빌드된 이미지를 사용하여 컨테이너를 실행합니다.

1. 아래 명령어를 사용하여 컨테이너를 실행합니다:

```bash
docker run -d -p 8080:8080 --name my-running-app my-tomcat-app
```

여기서:
- `-d` : 컨테이너를 백그라운드에서 실행합니다.
- `-p 8080:8080` : 호스트의 8080 포트를 컨테이너의 8080 포트에 매핑합니다.
- `--name my-running-app` : 컨테이너의 이름을 지정합니다.
- `my-tomcat-app` : 앞서 빌드한 이미지의 이름입니다.

### 4. 애플리케이션 접속

컨테이너가 성공적으로 실행되면 웹 브라우저를 열고 다음 URL로 이동하여 애플리케이션에 접속할 수 있습니다:

```
http://localhost:8080/your-app
```

여기서 `your-app`은 WAR 파일의 이름에 따라 다를 수 있습니다.

### 5. 추가 설정 (옵션)

필요에 따라 환경 변수 설정, Tomcat 설정 파일 수정 등 추가 설정이 필요할 수 있습니다. 이를 위해 Dockerfile에 필요한 명령어를 추가하거나, `docker-compose`를 사용할 수도 있습니다.

#### Docker Compose 사용 예시

아래는 Docker Compose를 사용하여 Tomcat 컨테이너를 설정하는 예시입니다:

1. `docker-compose.yml` 파일 작성:

```yaml
version: '3.8'

services:
  tomcat:
    image: tomcat:9.0
    container_name: my-tomcat-app
    ports:
      - "8080:8080"
    volumes:
      - ./your-app.war:/usr/local/tomcat/webapps/your-app.war
```

2. 아래 명령어로 Docker Compose를 실행하여 컨테이너를 시작합니다:

```bash
docker-compose up -d
```

이제 Tomcat 서버에서 실행 중인 WAR 파일 기반 애플리케이션에 접근할 수 있습니다.

이와 같은 방식으로 Docker를 사용하여 Tomcat 서버에 WAR 파일을 배포할 수 있습니다. 필요한 경우 추가적인 설정이나 커스터마이징을 통해 배포 환경을 더욱 최적화할 수 있습니다.