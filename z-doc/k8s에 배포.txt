Kubernetes를 사용하여 Tomcat 서버에 WAR 파일을 배포하는 방법을 단계별로 설명드리겠습니다. 이 과정은 Docker 이미지 생성, Kubernetes Deployment 및 Service 생성, 그리고 Kubernetes 클러스터에서 애플리케이션 배포의 세 가지 주요 단계로 나뉩니다.

### 1. Docker 이미지 생성

먼저 Tomcat 이미지를 기반으로 사용자 지정 이미지를 만들기 위해 Dockerfile을 작성합니다. 이 Dockerfile에는 WAR 파일을 Tomcat의 `webapps` 디렉토리에 복사하는 작업이 포함됩니다.

1. 프로젝트 디렉토리를 생성하고 WAR 파일을 해당 디렉토리로 이동합니다.
2. 아래와 같은 내용으로 `Dockerfile`을 작성합니다:

```dockerfile
=============================================
# Tomcat 베이스 이미지 사용
FROM tomcat:9.0

# WAR 파일을 Tomcat의 webapps 디렉토리에 복사
COPY your-app.war /usr/local/tomcat/webapps/

# Tomcat의 기본 포트
EXPOSE 8080
=============================================

3. Docker 이미지를 빌드합니다:

=============================================
```bash
docker build -t my-tomcat-app .
=============================================
```

여기서 `my-tomcat-app`은 생성될 이미지의 이름입니다.

4. Docker Hub 또는 개인 레지스트리에 이미지를 푸시합니다:

=============================================
```bash
docker tag my-tomcat-app changwskr1974/my-tomcat-app
docker push changwskr1974/my-tomcat-app
```
=============================================

### 2. Kubernetes Deployment 및 Service 생성

이제 Kubernetes 클러스터에서 애플리케이션을 배포하기 위한 설정 파일을 작성합니다.

1. `deployment.yaml` 파일을 작성합니다:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tomcat
  template:
    metadata:
      labels:
        app: tomcat
    spec:
      containers:
      - name: tomcat
        image: your-dockerhub-username/my-tomcat-app:latest
        ports:
        - containerPort: 8080
```

2. `service.yaml` 파일을 작성합니다:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: tomcat-service
spec:
  selector:
    app: tomcat
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
  type: LoadBalancer
```

### 3. Kubernetes 클러스터에 배포

1. `kubectl`을 사용하여 Deployment와 Service를 클러스터에 적용합니다:

```bash
kubectl apply -f deployment.yaml
kubectl apply -f service.yaml
```

2. Deployment와 Service가 생성되었는지 확인합니다:

```bash
kubectl get deployments
kubectl get services
```

3. LoadBalancer 서비스가 외부 IP 주소를 받으면 웹 브라우저를 통해 해당 IP 주소로 접속할 수 있습니다:

```
http://<external-ip>
```

여기서 `<external-ip>`는 `kubectl get services` 명령어로 확인한 외부 IP 주소입니다.

이제 Kubernetes 클러스터에서 Tomcat 서버에 WAR 파일 기반 애플리케이션이 배포되었습니다. 필요에 따라 추가 설정이나 커스터마이징을 통해 배포 환경을 더욱 최적화할 수 있습니다.